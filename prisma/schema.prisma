generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  username    String       @unique
  email       String       @unique
  password    String
  phone       String       @unique
  token       String
  photo       String       @default("https://toppng.com/uploads/preview/file-svg-profile-icon-vector-11562942678pprjdh47a8.png")
  description String       @default("")
  addresses   Address[]
  creditCards CreditCard[]
  orders      Order[]
  products    Product[]
  reviews     Review[]
}

model Product {
  id             Int              @id @default(autoincrement())
  name           String
  userId         Int
  description    String
  categoryName   String
  photos         String[]
  price          Decimal
  uploadDate     DateTime         @default(now())
  category       Category         @relation(fields: [categoryName], references: [name])
  user           User             @relation(fields: [userId], references: [id])
  ProductsOrders ProductsOrders[]
  reviews        Review[]
}

model Category {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  level      Int
  upperLevel String?
  image      String?
  products   Product[]
}

model Order {
  id             Int              @id @default(autoincrement())
  buyDate        DateTime         @default(now())
  sendDate       DateTime
  deliveryDate   DateTime
  userId         Int
  sellerName     String
  creditCardId   Int
  creditCard     CreditCard       @relation(fields: [creditCardId], references: [id])
  user           User             @relation(fields: [userId], references: [id])
  ProductsOrders ProductsOrders[]
}

model Address {
  id          Int     @id @default(autoincrement())
  country     String
  city        String
  zipCode     String
  street      String
  houseNumber String
  isFavorite  Boolean
  userId      Int
  user        User    @relation(fields: [userId], references: [id])
  isActive    Boolean @default(true)

}

model CreditCard {
  id         Int     @id @default(autoincrement())
  userId     Int
  cardNumber Int
  cvc        Int
  expiryDate String
  isFavorite Boolean
  user       User    @relation(fields: [userId], references: [id])
  Order      Order[]
  isActive   Boolean @default(true)

}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int?
  productId Int?
  comment   String
  photo     String   @default("")
  rating    Int
  reviewer  String
  product   Product? @relation(fields: [productId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
}

model ProductsOrders {
  productId Int
  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@id([productId, orderId])
}
